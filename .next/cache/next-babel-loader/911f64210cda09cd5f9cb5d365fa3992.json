{"ast":null,"code":"import { promises as fsPromises } from 'fs';\nimport os from 'os';\nimport path from 'path';\nexport async function getPostList() {\n  const markdownFiles = await fsPromises.readdir('data');\n  const postList = markdownFiles.map(filename => {\n    const slug = filename.replace(/.md$/, '');\n    const [year, month, date, ...rest] = slug.split('-');\n    const createdAt = new Date(`${year} ${month} ${date}`).getTime();\n    const title = rest.join(' ');\n    return {\n      slug,\n      createdAt,\n      title\n    };\n  });\n  return postList;\n}\nexport async function getPost(slug) {\n  const [year, month, day, ...rest] = slug.split('-');\n  const createdAt = new Date(`${year} ${month} ${day}`).getTime();\n  const title = rest.join(' ');\n  const content = await fsPromises.readFile(`data/${slug}.md`, 'utf8');\n  return {\n    slug: slug,\n    title,\n    content,\n    createdAt\n  };\n}\n\nfunction genUserFilePath(userId) {\n  return path.join(os.tmpdir(), 'bulletproof-next-app', 'user', `${userId}.json`);\n}\n\nexport async function saveUser(user) {\n  const payload = JSON.stringify(user);\n  const filePath = genUserFilePath(user.id);\n  await fsPromises.mkdir(path.dirname(filePath), {\n    recursive: true\n  });\n  await fsPromises.writeFile(filePath, payload, 'utf8');\n  return user.id;\n}\nexport async function getUser(id) {\n  const filePath = genUserFilePath(id);\n\n  try {\n    const jsonString = await fsPromises.readFile(filePath, 'utf8');\n    return JSON.parse(jsonString);\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return null;\n    }\n\n    throw err;\n  }\n}","map":{"version":3,"sources":["/Users/jaydesai1/bulletproof-next-app/lib/fs-cms.js"],"names":["promises","fsPromises","os","path","getPostList","markdownFiles","readdir","postList","map","filename","slug","replace","year","month","date","rest","split","createdAt","Date","getTime","title","join","getPost","day","content","readFile","genUserFilePath","userId","tmpdir","saveUser","user","payload","JSON","stringify","filePath","id","mkdir","dirname","recursive","writeFile","getUser","jsonString","parse","err","code"],"mappings":"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","sourcesContent":["import { promises as fsPromises } from 'fs'\nimport os from 'os'\nimport path from 'path'\n\nexport async function getPostList() {\n    const markdownFiles = await fsPromises.readdir('data')\n\n    const postList = markdownFiles.map(filename => {\n        const slug = filename.replace(/.md$/, '')\n        const [year, month, date, ...rest] = slug.split('-')\n        const createdAt = (new Date(`${year} ${month} ${date}`)).getTime()\n        const title = rest.join(' ')\n\n        return {\n            slug,\n            createdAt,\n            title\n        }\n    })\n\n    return postList\n}\n\nexport async function getPost(slug) {\n    const [year, month, day, ...rest] = slug.split('-')\n    const createdAt = (new Date(`${year} ${month} ${day}`)).getTime()\n    const title = rest.join(' ')\n    const content = await fsPromises.readFile(`data/${slug}.md`, 'utf8')\n\n    return {\n        slug: slug,\n        title,\n        content,\n        createdAt\n    }\n}\n\nfunction genUserFilePath(userId) {\n    return path.join(os.tmpdir(), 'bulletproof-next-app', 'user', `${userId}.json`)\n}\n\nexport async function saveUser(user) {\n    const payload = JSON.stringify(user)\n    const filePath = genUserFilePath(user.id)\n    await fsPromises.mkdir(path.dirname(filePath), { recursive: true })\n\n    await fsPromises.writeFile(filePath, payload, 'utf8')\n    return user.id\n}\n\nexport async function getUser(id) {\n    const filePath = genUserFilePath(id)\n    try {\n        const jsonString = await fsPromises.readFile(filePath, 'utf8')\n        return JSON.parse(jsonString)\n    } catch(err) {\n        if (err.code === 'ENOENT') {\n            return null\n        }\n\n        throw err\n    }\n}"]},"metadata":{},"sourceType":"module"}