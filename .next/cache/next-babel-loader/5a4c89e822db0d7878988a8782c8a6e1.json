{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport { saveUser, getUser } from '../../../lib/data';\nconst providers = [Providers.GitHub({\n  clientId: process.env.GITHUB_CLIENT_ID,\n  clientSecret: process.env.GITHUB_CLIENT_SECRET\n})];\nconst callbacks = {};\n\ncallbacks.signIn = async function signIn(user, account, metadata) {\n  const emailRes = await fetch('https://api.github.com/user/emails', {\n    headers: {\n      'Authorization': `token ${account.accessToken}`\n    }\n  });\n  const emails = await emailRes.json();\n  const primaryEmail = emails.find(e => e.primary).email;\n  const githubUser = {\n    id: metadata.id,\n    login: metadata.login,\n    name: metadata.name,\n    email: primaryEmail,\n    avatar: user.image\n  };\n  user.id = await saveUser('github', githubUser);\n  return true;\n};\n\ncallbacks.jwt = async function jwt(token, user) {\n  if (user) {\n    token = {\n      id: user.id\n    };\n  }\n\n  return token;\n};\n\ncallbacks.session = async function session(session, token) {\n  const dbUser = await getUser(token.id);\n\n  if (!dbUser) {\n    return null;\n  }\n\n  session.user = {\n    id: dbUser.id,\n    github: {\n      avatar: dbUser.github.avatar,\n      login: dbUser.github.login,\n      name: dbUser.github.name\n    }\n  };\n  return session;\n};\n\nconst options = {\n  providers,\n  session: {\n    jwt: true\n  },\n  jwt: {\n    secret: process.env.JWT_SECRET\n  },\n  callbacks\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":null,"metadata":{},"sourceType":"module"}