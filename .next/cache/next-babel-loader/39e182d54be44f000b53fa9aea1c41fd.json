{"ast":null,"code":"import { promises as fsPromises } from 'fs';\nimport os from 'os';\nimport path from 'path';\nexport async function getPostList() {\n  const markdownFiles = await fsPromises.readdir('data');\n  const postList = markdownFiles.map(filename => {\n    const slug = filename.replace(/.md$/, '');\n    const [year, month, date, ...rest] = slug.split('-');\n    const createdAt = new Date(`${year} ${month} ${date}`).getTime();\n    const title = rest.join(' ');\n    return {\n      slug,\n      createdAt,\n      title\n    };\n  });\n  return postList;\n}\nexport async function getPost(slug) {\n  const [year, month, day, ...rest] = slug.split('-');\n  const createdAt = new Date(`${year} ${month} ${day}`).getTime();\n  const title = rest.join(' ');\n  const content = await fsPromises.readFile(`data/${slug}.md`, 'utf8');\n  return {\n    slug: slug,\n    title,\n    content,\n    createdAt\n  };\n}\n\nfunction genUserFilePath(userId) {\n  return path.join(os.tmpdir(), 'bulletproof-next-app', 'user', `${userId}.json`);\n}\n\nexport async function saveUser(user) {\n  const payload = JSON.stringify(user);\n  const filePath = genUserFilePath(user.id);\n  await fsPromises.mkdir(path.dirname(filePath), {\n    recursive: true\n  });\n  await fsPromises.writeFile(filePath, payload, 'utf8');\n  return user.id;\n}\nexport async function getUser(id) {\n  const filePath = genUserFilePath(id);\n\n  try {\n    const jsonString = await fsPromises.readFile(filePath, 'utf8');\n    return JSON.parse(jsonString);\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return null;\n    }\n\n    throw err;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}