{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport { saveUser, getUser } from '../../../lib/data';\nconst providers = [Providers.GitHub({\n  clientId: process.env.GITHUB_CLIENT_ID,\n  clientSecret: process.env.GITHUB_CLIENT_SECRET\n})];\nconst callbacks = {};\n\ncallbacks.signIn = async function signIn(user, account, metadata) {\n  const emailRes = await fetch('https://api.github.com/user/emails', {\n    headers: {\n      'Authorization': `token ${account.accessToken}`\n    }\n  });\n  const emails = await emailRes.json();\n  const primaryEmail = emails.find(e => e.primary).email;\n  const githubUser = {\n    id: metadata.id,\n    login: metadata.login,\n    name: metadata.name,\n    email: primaryEmail,\n    avatar: user.image\n  };\n  user.id = await saveUser('github', githubUser);\n  return true;\n};\n\ncallbacks.jwt = async function jwt(token, user) {\n  if (user) {\n    token = {\n      id: user.id\n    };\n  }\n\n  return token;\n};\n\ncallbacks.session = async function session(session, token) {\n  const dbUser = await getUser(token.id);\n\n  if (!dbUser) {\n    return null;\n  }\n\n  session.user = {\n    id: dbUser.id,\n    github: {\n      avatar: dbUser.github.avatar,\n      login: dbUser.github.login,\n      name: dbUser.github.name\n    }\n  };\n  return session;\n};\n\nconst options = {\n  providers,\n  session: {\n    jwt: true\n  },\n  jwt: {\n    secret: process.env.JWT_SECRET\n  },\n  callbacks\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["/Users/jaydesai1/bulletproof-next-app/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","saveUser","getUser","providers","GitHub","clientId","process","env","GITHUB_CLIENT_ID","clientSecret","GITHUB_CLIENT_SECRET","callbacks","signIn","user","account","metadata","emailRes","fetch","headers","accessToken","emails","json","primaryEmail","find","e","primary","email","githubUser","id","login","name","avatar","image","jwt","token","session","dbUser","github","options","secret","JWT_SECRET","req","res"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,mBAAlC;AAGA,MAAMC,SAAS,GAAG,CACdH,SAAS,CAACI,MAAV,CAAiB;AACbC,EAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADT;AAEbC,EAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAFb,CAAjB,CADc,CAAlB;AAOA,MAAMC,SAAS,GAAG,EAAlB;;AAEAA,SAAS,CAACC,MAAV,GAAmB,eAAeA,MAAf,CAAsBC,IAAtB,EAA4BC,OAA5B,EAAqCC,QAArC,EAA+C;AAC9D,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAD,EAAuC;AACjEC,IAAAA,OAAO,EAAE;AACP,uBAAkB,SAAQJ,OAAO,CAACK,WAAY;AADvC;AADwD,GAAvC,CAA5B;AAKA,QAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAArB;AACA,QAAMC,YAAY,GAAGF,MAAM,CAACG,IAAP,CAAYC,CAAC,IAAIA,CAAC,CAACC,OAAnB,EAA4BC,KAAjD;AAEA,QAAMC,UAAU,GAAG;AACjBC,IAAAA,EAAE,EAAEb,QAAQ,CAACa,EADI;AAEjBC,IAAAA,KAAK,EAAEd,QAAQ,CAACc,KAFC;AAGjBC,IAAAA,IAAI,EAAEf,QAAQ,CAACe,IAHE;AAIjBJ,IAAAA,KAAK,EAAEJ,YAJU;AAKjBS,IAAAA,MAAM,EAAElB,IAAI,CAACmB;AALI,GAAnB;AAQAnB,EAAAA,IAAI,CAACe,EAAL,GAAU,MAAM3B,QAAQ,CAAC,QAAD,EAAW0B,UAAX,CAAxB;AACA,SAAO,IAAP;AACH,CAnBD;;AAqBAhB,SAAS,CAACsB,GAAV,GAAgB,eAAeA,GAAf,CAAmBC,KAAnB,EAA0BrB,IAA1B,EAAgC;AAC5C,MAAIA,IAAJ,EAAU;AACRqB,IAAAA,KAAK,GAAG;AAACN,MAAAA,EAAE,EAAEf,IAAI,CAACe;AAAV,KAAR;AACD;;AAED,SAAOM,KAAP;AACH,CAND;;AAQAvB,SAAS,CAACwB,OAAV,GAAoB,eAAeA,OAAf,CAAuBA,OAAvB,EAAgCD,KAAhC,EAAuC;AACvD,QAAME,MAAM,GAAG,MAAMlC,OAAO,CAACgC,KAAK,CAACN,EAAP,CAA5B;;AACA,MAAI,CAACQ,MAAL,EAAa;AACX,WAAO,IAAP;AACD;;AAEDD,EAAAA,OAAO,CAACtB,IAAR,GAAe;AACbe,IAAAA,EAAE,EAAEQ,MAAM,CAACR,EADE;AAEbS,IAAAA,MAAM,EAAE;AACNN,MAAAA,MAAM,EAAEK,MAAM,CAACC,MAAP,CAAcN,MADhB;AAENF,MAAAA,KAAK,EAAEO,MAAM,CAACC,MAAP,CAAcR,KAFf;AAGNC,MAAAA,IAAI,EAAEM,MAAM,CAACC,MAAP,CAAcP;AAHd;AAFK,GAAf;AASA,SAAOK,OAAP;AACH,CAhBD;;AAmBA,MAAMG,OAAO,GAAG;AACdnC,EAAAA,SADc;AAEdgC,EAAAA,OAAO,EAAE;AACPF,IAAAA,GAAG,EAAE;AADE,GAFK;AAKdA,EAAAA,GAAG,EAAE;AACHM,IAAAA,MAAM,EAAEjC,OAAO,CAACC,GAAR,CAAYiC;AADjB,GALS;AAQd7B,EAAAA;AARc,CAAhB;AAWA,gBAAe,CAAC8B,GAAD,EAAMC,GAAN,KAAc3C,QAAQ,CAAC0C,GAAD,EAAMC,GAAN,EAAWJ,OAAX,CAArC","sourcesContent":["import NextAuth from 'next-auth'\nimport Providers from 'next-auth/providers'\nimport { saveUser, getUser } from '../../../lib/data'\n\n\nconst providers = [\n    Providers.GitHub({\n        clientId: process.env.GITHUB_CLIENT_ID,\n        clientSecret: process.env.GITHUB_CLIENT_SECRET\n    })\n]\n\nconst callbacks = {}\n\ncallbacks.signIn = async function signIn(user, account, metadata) {\n    const emailRes = await fetch('https://api.github.com/user/emails', {\n      headers: {\n        'Authorization': `token ${account.accessToken}`\n      }\n    })\n    const emails = await emailRes.json()\n    const primaryEmail = emails.find(e => e.primary).email;\n  \n    const githubUser = {\n      id: metadata.id,\n      login: metadata.login,\n      name: metadata.name,\n      email: primaryEmail,\n      avatar: user.image\n    }\n  \n    user.id = await saveUser('github', githubUser)\n    return true;\n}\n\ncallbacks.jwt = async function jwt(token, user) {\n    if (user) {\n      token = {id: user.id}\n    }\n  \n    return token\n}\n\ncallbacks.session = async function session(session, token) {\n    const dbUser = await getUser(token.id)\n    if (!dbUser) {\n      return null\n    }\n    \n    session.user = {\n      id: dbUser.id,\n      github: {\n        avatar: dbUser.github.avatar,\n        login: dbUser.github.login,\n        name: dbUser.github.name\n      }\n    }\n    \n    return session\n}\n  \n\nconst options = {\n  providers,\n  session: {\n    jwt: true\n  },\n  jwt: {\n    secret: process.env.JWT_SECRET\n  },\n  callbacks\n}\n\nexport default (req, res) => NextAuth(req, res, options)"]},"metadata":{},"sourceType":"module"}